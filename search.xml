<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>左程云代码课记录（一）</title>
      <link href="/2018/06/15/%E5%B7%A6%E7%A8%8B%E4%BA%91%E4%BB%A3%E7%A0%81%E8%AF%BE%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/06/15/%E5%B7%A6%E7%A8%8B%E4%BA%91%E4%BB%A3%E7%A0%81%E8%AF%BE%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>从目前的面试情况来看，像腾讯这种公司考查的主要内容还是对基础知识的掌握程度，特别是算法部分，真的需要下一番功夫。所以找了这一套视频，打算一天一集，然后记录下讲的内容，今天是第一集。</p><h3 id="打印矩阵"><a href="#打印矩阵" class="headerlink" title="打印矩阵"></a>打印矩阵</h3><h4 id="回形打印矩阵"><a href="#回形打印矩阵" class="headerlink" title="回形打印矩阵"></a>回形打印矩阵</h4><p>方法：用矩阵的左上角和右下角唯一确定矩阵。打印最外层回字，然后左上角的标记横纵坐标加一，右下角的标记横纵坐标减一，再打印第二层回字，按照这种方法逐层打印，直到打印到最里层。</p><h4 id="之字形打印矩阵"><a href="#之字形打印矩阵" class="headerlink" title="之字形打印矩阵"></a>之字形打印矩阵</h4><p>方法：写一个打印斜线的函数func(int a,int b,int m,int n)，然后从开始的位置往两边扩展。比如从左上角（a,b）开始，打印之后，往右边和下边拓展成(a+1,b)和(a,b+1)组成的斜线。注：当哪一个坐标扩展不了的时候，就扩展另一个坐标。</p><h3 id="找序列中不止出现一次的值"><a href="#找序列中不止出现一次的值" class="headerlink" title="找序列中不止出现一次的值"></a>找序列中不止出现一次的值</h3><p>方法1（时间复杂度最低，为O(N)）：用哈希，找到第一次冲突的元素。<br>方法2（空间复杂度最低，为O(1)）：用空间复杂度为O(1)的排序方法，推荐：堆排序</p><h3 id="找到序列中出现次数大于一半的元素"><a href="#找到序列中出现次数大于一半的元素" class="headerlink" title="找到序列中出现次数大于一半的元素"></a>找到序列中出现次数大于一半的元素</h3><p>方法：每次删掉两个不同的元素，最后留下的元素就是出现次数大于一半的元素。<br>实现过程描述：   </p><ol><li>设置一个候选人cand，一个出现次数times。</li><li>遍历整个序列，遍历到i时，当cand为空的时候，那么cand记录i，times加1。当cand不为空，但是i与cand不同时，times减1，若与cand相同，那么就将times加1。当times变为0时，那么cand为空。</li><li>统计元素中候选人cand的数量，看是否大于N/2。之所以需要这一步，是因为1、2、3这种情况的话，3也会成为候选人的。</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cand <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cand <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cand <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            times<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cand <span class="token operator">!=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            times<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            times<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>times <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cand <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> cand<span class="token punctuation">)</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cand<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>描述：找到序列中出现次数大于N/k的所有元素。   </p><p>方法：每次删掉k个不同的元素，剩下的就是要找的。在上面的方法上进行拓展，出现次数大于N/k，那么这个序列中最多只有k-1个这样的元素，那么候选人的数量调整到k-1个就行了。候选人不齐的时候，就拓展候选人到k-1个，候选人齐的时候，新遇到的元素与前面哪个候选人相同，那么那个候选人的次数加1，如果与前面候选人都不相同的话，则所有候选人次数减1。候选人次数为0的时候，就丢弃这个候选人。</p>]]></content>
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Top K问题</title>
      <link href="/2018/06/13/Top-K%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/13/Top-K%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>短短四次面试，其中两次被问到TopK问题，还是有必要详细地记录一下解法。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>有一个长度一百万的序列，如何找到其中最大的前100个数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先能够想到的一种思路是用堆排序的方式，首先创建一个大顶堆包含100w个元素，然后每次取堆顶，之后调整堆成为一个新的大顶堆。这样的做法，创建堆的时间复杂度是O(N),每次调整堆的时间复杂度O(lgN)，所以最终的时间复杂度为O(N+k*lgN)。   </p><p>但是面试官好像并不买账这种做法，因为完全没有必要创建一个包含所有元素的堆。</p><p>第二种思路就是只创建一个100大小的<b>小顶堆</b>，然后遍历后面的元素，如果value比堆顶的元素小，那么就舍弃这个元素，因为它比不可能是最大的100个元素了，如果value比堆顶元素大，那么就替换堆顶元素，然后将<b>堆顶下沉</b>（重新调整堆）得到新的堆。这样的做法算法复杂度是O(N*lgK)。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调整堆 </span><span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> k<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> k<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> k<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> j<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     k<span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">adjust</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//随机产生100个数据 </span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用解决方案 </span>    <span class="token function">solve</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>MAX<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出最后的结果 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>保证下次Top K问题绝对不再吃亏！</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Top K </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>突如其来的腾讯电话面试回顾</title>
      <link href="/2018/06/13/%E7%AA%81%E5%A6%82%E5%85%B6%E6%9D%A5%E7%9A%84%E8%85%BE%E8%AE%AF%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E5%9B%9E%E9%A1%BE/"/>
      <url>/2018/06/13/%E7%AA%81%E5%A6%82%E5%85%B6%E6%9D%A5%E7%9A%84%E8%85%BE%E8%AE%AF%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E5%9B%9E%E9%A1%BE/</url>
      <content type="html"><![CDATA[<p>刚刚正在逛淘宝，然后突然来了一个腾讯的面试电话，复习过的东西全都忘了，所有东西都记得模模糊糊，怎一个惨字了得。现在凭借回忆写一下被问到的题目。   </p><ol><li>关于原子性和线程安全。问：下列哪一个操作是线程安全的：a.A++ b.A = 1 c.A = B</li><li>top k问题，一百万个游戏数据，找到最大的100个。</li><li>http协议 post和get有什么区别。http请求的参数是放在哪里的。</li><li>简述tcp的四次握手。time_wait这个阶段在干什么。主动连接方什么情况下不能直接close。</li><li>算法题：一个10*10棋盘，棋子要从左下角走到右下角，每次只能往上或者往右走，问一共需要多少步。</li><li>简述虚函数的原理和机制。</li><li>找到一个链表的倒数第k个节点。</li><li>哈希表的实现和map的实现有什么不同。</li><li>简述vector和list的区别。</li><li>有没有对于socket编程的相关知识。</li><li>怎么在linux环境下查看进程的cpu占用情况。</li><li>描述一下自己的性格优点和缺点。</li></ol><p>总得来说题目还是比较常规吧，只是自己忘得太快了，好多东西刚看了没几天就忘了。··</p>]]></content>
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么拷贝构造函数的参数一定要引用</title>
      <link href="/2018/06/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%80%E5%AE%9A%E8%A6%81%E5%BC%95%E7%94%A8/"/>
      <url>/2018/06/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%80%E5%AE%9A%E8%A6%81%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>关于昨天的面试问题中的关于拷贝构造函数的参数是否一定要用引用，我其实回答的不是很好，面试前没有复习到，记忆比较模糊。今天包括“=”好好复习了一下，记录于此。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>首先看测试用例：</p><pre class=" language-c"><code class="language-c">class Test<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Test</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">s</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>other<span class="token punctuation">)</span><span class="token punctuation">{</span>        this<span class="token operator">-></span>s <span class="token operator">=</span> other<span class="token punctuation">.</span>s<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"+s:"</span><span class="token operator">&lt;&lt;</span> other<span class="token punctuation">.</span>s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Test other<span class="token punctuation">)</span><span class="token punctuation">{</span>        this<span class="token operator">-></span>s <span class="token operator">=</span> other<span class="token punctuation">.</span>s<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"测试函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    Test&amp; operator=(Test other){</span><span class="token comment" spellcheck="true">//        this->s = other.s;</span><span class="token comment" spellcheck="true">//        cout &lt;&lt; "等号的重载" &lt;&lt; endl; </span><span class="token comment" spellcheck="true">//    }</span>    Test<span class="token operator">&amp;</span> operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>        this<span class="token operator">-></span>s <span class="token operator">=</span> other<span class="token punctuation">.</span>s<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"等号的重载"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    string s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Test A<span class="token punctuation">;</span>    Test <span class="token function">B</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    B<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Test <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A <span class="token operator">=</span> C<span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>运行结果：<img src="https://raw.githubusercontent.com/NewLewis/MarkdownPhotos/master/test2.png" alt="运行截图"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先分析一下这段代码，在Test类中有无参的构造函数，有参的构造函数，拷贝构造函数以及“=”的重载。</p><p>在输出中第一二个输出肯定是没有问题的，真正的重点要从第三个输出开始。可能乍一看不是很清楚第三个输出是怎么来的，但是细细分析还是可以猜出来的。<br>首先分析test这个函数，这个test函数的参数按值传参，那么在执行函数体之前会发生从实参到形参的一个转换，而这个转换要用到Test类的拷贝构造函数，即进行了Test(B)的一个操作，所以会存在第三行这样的输出。这样第四行和第五行的输出也就理所当然了。</p><h4 id="结论1"><a href="#结论1" class="headerlink" title="结论1"></a>结论1</h4><ul><li>有了上面的分析我们就能解释为什么拷贝构造函数的参数只能使用引用了。因为如果拷贝构造函数的参数是按值传参，那么就会发生上面test函数那里发生的情况，调用拷贝构造函数，然后拷贝构造函数仍然是按值传参，那么继续调用拷贝构造函数，这样就会进入一个无限递归调用拷贝构造函数的bug。所以拷贝构造函数是必须按引用传递的。不按引用传递，直接编译不通过。</li></ul><p>最后两行输出是“=”重载的一个测试，等号重载的参数是按照引用传递的，测试结果也与预期相符。</p><p>现在将“=”重载函数换成被注释掉的按值传递的函数，结果也是能通过编译的，测试结果如下所示：</p><pre><code>拷贝构造函数+s:C等号的重载C</code></pre><p>从这个结果我们可以看到，从实参到形参形参的转换再次用了拷贝构造函数，其他部分没啥说的。</p><h4 id="结论2"><a href="#结论2" class="headerlink" title="结论2"></a>结论2</h4><ul><li>所以说“=”号重载是可以用按值传递方式的，但是通常不采用，因为这样做会多以此拷贝，降低效率。</li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>路漫漫其修远兮，吾将上下而求索~~~</p>]]></content>
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造函数 </tag>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BIGO面试试题回顾</title>
      <link href="/2018/06/04/BIGO%E9%9D%A2%E8%AF%95%E8%AF%95%E9%A2%98%E5%9B%9E%E9%A1%BE/"/>
      <url>/2018/06/04/BIGO%E9%9D%A2%E8%AF%95%E8%AF%95%E9%A2%98%E5%9B%9E%E9%A1%BE/</url>
      <content type="html"><![CDATA[<p>今天面试了BIGO，人生第一次关于职业的面试，面试官的问题感觉没有想像的那么难，但是比想像的需求更高。这次是一下午直接面了三轮，三轮都是技术面，面完试之后头都大了，可能这种高强度的压力正是一个职场er需要的吧。下面来总结一下这次在面试中遇到的问题，供大家参考，也为自己不再踩坑而努力一下。</p><ol><li>C++中拷贝构造函数的参数是不是一定要引用</li><li>“=”重载的参数是不是一定要引用</li><li>简述一下的static关键字的用法</li><li>虚函数以及多态的使用</li><li><p>算法题：计算当n=981时,下列代码的输出值。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> countx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>     n <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     countx<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> countx <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>定义递增序列的中位数为A[L/2]，L为序列长度。给定两个等长的递增序列，求两个序列合并成的序列的中位数。简述思想，写出代码，计算时间和空间复杂度。</li><li>给定两个矩阵A和B,求两个矩阵的积。要求:尽量优化细节。</li><li>快速排序的时间复杂度，堆排序的时间复杂度，创建堆的时间复杂度。</li><li>思考题：给定一个圆环，在圆环上存在一个站点，在圆环上有一个小车在绕圆环运动，每次经过站点，都有50%的几率改变速度。小车有两种速度,2min/圈和1min/圈,所以每次经过圆环速度都有50%的几率从1变成2或者从2变成1，或者不变。小车在站点改变速度之后做匀速运动。现在假设你在任意一个时间点出现在站点上，那么还要多久时间能等到小车经过。</li><li>有16只球队，最少经过多少次比赛可以找到球队中最厉害的球队和第二厉害的球队。</li><li>有一个数组A=[a1,a2,a3,a4….,an]，写一个函数找到所有选择的结果。比如：只选择一个的时候RES = [a1,a2,a3,a4….,an],选择两个的时候RES=[a1a2,a1a3,a1a4…..,a1a9n…..an-1an]等。</li></ol>]]></content>
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android端与服务器端的交互（通过http协议）</title>
      <link href="/2018/05/03/Android%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E4%BA%A4%E4%BA%92%EF%BC%88%E9%80%9A%E8%BF%87http%E5%8D%8F%E8%AE%AE%EF%BC%89/"/>
      <url>/2018/05/03/Android%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E4%BA%A4%E4%BA%92%EF%BC%88%E9%80%9A%E8%BF%87http%E5%8D%8F%E8%AE%AE%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>今天终于完成了数据库完全在服务器端的调用，完全与安卓端分离，安卓端只需要给服务器端发送请求，服务器端执行关于数据库的操作，最后将结果返回给安卓端，这样就大大节省了安卓端的效率。实验是参考<a href="http://jazzyin.com/2016/03/30/android-HTTP-demo/" target="_blank" rel="noopener">这篇博客</a>完成的。</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ul><li>腾讯云服务器，系统:ubuntu-server 16.04.</li><li>Tomcat 8.5</li><li>jdk 8u161        </li><li>安卓端 sdk 8.0<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3></li><li>IDEA 2018</li><li>Android Studio 3.1</li></ul><h2 id="实现服务器端"><a href="#实现服务器端" class="headerlink" title="实现服务器端"></a>实现服务器端</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>本次的服务器端只实现了两个功能，登录和注册，所以在servlet目录里只有两项。<br><img src="https://raw.githubusercontent.com/NewLewis/MarkdownPhotos/master/1.png" alt="项目结构"></p><h3 id="web-xml配置文件"><a href="#web-xml配置文件" class="headerlink" title="web.xml配置文件"></a>web.xml配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LogLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.servlet.LogLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>RegLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.servlet.RegLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LogLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/LogLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>RegLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/RegLet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><h4 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a>调用关系</h4><p>首先LogLet或者RegLet类会调用Service服务类，然后Service类就会调用DBManager类进行数据库操作，并返回给LogLet或者RegLet类结果。</p><h4 id="DBManager"><a href="#DBManager" class="headerlink" title="DBManager"></a>DBManager</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>db<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据库连接常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PASS <span class="token operator">=</span> <span class="token string">"mysql"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把MySQL-USER和MySQL-PASS改为你的服务器mysql账户和密码</span>    <span class="token comment" spellcheck="true">// 静态成员，支持单态模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DBManager per <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单态模式-懒汉模式</span>    <span class="token keyword">private</span> <span class="token function">DBManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DBManager <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>per <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DBManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            per<span class="token punctuation">.</span><span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> per<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载驱动</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 连接数据库，获取句柄+对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connecting to database..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SqlManager:Connect to database successful."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭数据库 关闭对象，释放句柄</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Close connection to database.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Close connection successful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询</span>    <span class="token keyword">public</span> ResultSet <span class="token function">executeQuery</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 增添/删除/修改</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ret <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取Sql查询语句</span>        String logSql <span class="token operator">=</span> <span class="token string">"select * from student where username ='"</span> <span class="token operator">+</span> username                <span class="token operator">+</span> <span class="token string">"' and password ='"</span> <span class="token operator">+</span> password <span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取DB对象</span>        DBManager sql <span class="token operator">=</span> DBManager<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sql<span class="token punctuation">.</span><span class="token function">connectDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 操作DB对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ResultSet rs <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>logSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sql<span class="token punctuation">.</span><span class="token function">closeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">closeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取Sql查询语句</span>        String regSql <span class="token operator">=</span> <span class="token string">"insert into student (username,password) values('"</span>                <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"','"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"') "</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取DB对象</span>        DBManager sql <span class="token operator">=</span> DBManager<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sql<span class="token punctuation">.</span><span class="token function">connectDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>regSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      System.out.println("test"+ ret);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">closeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">closeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="LogLet"><a href="#LogLet" class="headerlink" title="LogLet"></a>LogLet</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogLet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 369840050351775312L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The doGet method of the Server let.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 接收信息</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String confirm<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新建服务对象</span>        Service serv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证处理</span>        <span class="token keyword">boolean</span> loged <span class="token operator">=</span>  serv<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loged<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Succss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            confirm <span class="token operator">=</span> <span class="token string">"\n登陆成功"</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// response.sendRedirect("welcome.jsp");</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            confirm <span class="token operator">=</span> <span class="token string">"\n账号或密码不正确"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回信息</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"用户名："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"密码："</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>confirm<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The doPost method of the Server let.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 测试为何手机端中文乱码，电脑正常</span>        <span class="token comment" spellcheck="true">// System.out.println("u1--"+username);</span>        <span class="token comment" spellcheck="true">// System.out.println("u2--"+username);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="RegLet"><a href="#RegLet" class="headerlink" title="RegLet"></a>RegLet</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegLet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>4415294210787731608L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The doGet method of the Server let.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 新建服务对象</span>        Service serv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 接收注册信息</span><span class="token comment" spellcheck="true">//      String username = request.getParameter("r_name");</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String confirm<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      String password = request.getParameter("r_password");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证处理</span>        <span class="token keyword">boolean</span> reged <span class="token operator">=</span> serv<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span> <span class="token operator">+</span> reged<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reged<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Succss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            confirm<span class="token operator">=</span><span class="token string">"\n注册成功"</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//response.sendRedirect("welcome.jsp");</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            confirm<span class="token operator">=</span><span class="token string">"\n注册失败，似乎您已注册"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回信息</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"用户名："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"密码："</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>confirm<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The doPost method of the Server let.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="实现安卓端"><a href="#实现安卓端" class="headerlink" title="实现安卓端"></a>实现安卓端</h2><p>安卓端首先需要一个WebService类，来处理与服务器的链接。然后就是在activity中新建线程连接服务器获取结果。这里安卓端只写了登录，没有写注册的。</p><h3 id="WebService"><a href="#WebService" class="headerlink" title="WebService"></a>WebService</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// IP地址</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String IP <span class="token operator">=</span> <span class="token string">"119.29.180.206:8080"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把TOMCATURL改为你的服务器地址</span>    <span class="token comment" spellcheck="true">/**     * 通过Get方式获取HTTP服务器数据     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">executeHttpGet</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpURLConnection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 用户名 密码</span>            <span class="token comment" spellcheck="true">// URL 地址</span>            String path <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> IP <span class="token operator">+</span> <span class="token string">"/HelloWeb/"</span><span class="token punctuation">;</span>            path <span class="token operator">=</span> path <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"?username="</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"&amp;password="</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置超时时间</span>            conn<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置获取信息方式</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Charset"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置接收数据编码格式</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我貌似连上了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            if (conn.getResponseCode() == 200) {</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                is <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">parseInfo</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            }</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 意外退出时进行连接关闭保护</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"服务器连接超时..."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将输入流转化为 String 型</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">parseInfo</span><span class="token punctuation">(</span>InputStream inStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>inStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转化为字符串</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将输入流转化为byte型</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">read</span><span class="token punctuation">(</span>InputStream inStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        inStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="activity中的写法"><a href="#activity中的写法" class="headerlink" title="activity中的写法"></a>activity中的写法</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 子线程接收数据，主线程修改数据</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            info <span class="token operator">=</span> WebService<span class="token punctuation">.</span><span class="token function">executeHttpGet</span><span class="token punctuation">(</span><span class="token string">"LogLet"</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 最好返回一个固定键值，根据键值判断是否登陆成功，有键值就保存该info跳转，没键值就是错误信息直接toast</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Toast toast <span class="token operator">=</span> Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">;</span>                    toast<span class="token punctuation">.</span><span class="token function">setGravity</span><span class="token punctuation">(</span>Gravity<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本次的这所有的东西，基本上都是照搬别人博客上的，但是都是自己亲自实现了的，结果也成功了。<br>后面还需要解决的问题有：   </p><ol><li>安卓端与服务器端的交互用到的http到底是怎样实现的？   </li><li>服务器端的servlet到底是怎么回事？   </li><li>xml文件到底是怎么配置的？   </li><li>这里只有数据库的操作，那么文件传输又是怎么进行的？</li></ol>]]></content>
      
      <categories>
          
          <category> Android </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 mysql 交互 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数的划分</title>
      <link href="/2018/04/26/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%95%B0%E5%AD%97%E5%88%92%E5%88%86/"/>
      <url>/2018/04/26/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%95%B0%E5%AD%97%E5%88%92%E5%88%86/</url>
      <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>将n个完全相同的小球放入k个完全相同的盒子，每个盒子不能为空，问有多少种不同的放法。</p><p>例如，n=7，k=3，有四种放法：1,1,5; 1,2,4; 1,3,3; 2,2,3</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入n，k (6&lt;n&lt;=200，2&lt;=k&lt;=6)</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，即不同的方案数。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>7 3</code></pre><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>4</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>苹果m个，盘子n个。我用f(m,n)代表m个苹果，n个盘子有f(m,n)种放法。 </p><ol><li>当m&lt; n时，即使苹果每个盘子放一个也没法放满所有盘子，题目允许有的盘子空着不放，所以我们可以将空盘子去掉，即f(m,n)=f(m,m)    </li><li>当m&gt;=n时，这时候有两种情况：<br>①：n个盘子中至少有一个空盘子，当有空盘子时，f(m,n)=f(m,n-1),这时候问题出现了，f(m,n-1)代表的意思是m个苹果放到n-1个盘子中，那还可能有两个或者n个空盘子呢，下面我会介绍。<br>②：n个盘子中没有空盘子，当没有空盘子时也就是说每个盘子中至少有一个苹果，先把所有盘子填满，这时候会剩下m-n个苹果，所以现在问题变成了m-n个苹果放在n个盘子有多少种方法，即f(m-n,n)。<br>解释m&gt;=n时情况①的疑问：因为m&gt;=n,所以m&gt;=n-1必然成立，也就是说f(m,n-1)这个状态也会面临两中情况，即情况①和情况②，当面临情况①时可得f(m,n-1)=f(m,n-1-1)=f(m,n-2)。递归或者递推求解都可行。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token operator">-</span>k<span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token operator">-</span>k<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>handler的简单理解和使用</title>
      <link href="/2018/04/19/handler%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/19/handler%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>就绪学习安卓的过程中越发觉得自己是个菜鸡，以前写的代码都是辣鸡，甚至连以前写的辣鸡代码东弄不清楚。话不多说，今天来学习handler。</p><h3 id="为什么要用handler"><a href="#为什么要用handler" class="headerlink" title="为什么要用handler"></a>为什么要用handler</h3><p>在安卓实现的很多时候，我们要新建线程来完成某些费时操作，比如最常见的网络连接就是费时操作。并且很多时候这个线程往往伴随这UI更新操作，比如在网络上加载一张图片然后更新UI的imageView。但是在安卓中子线程中是不允许更新UI操作的，如果你强行更新，程序就会崩溃。这个时候我们就需要handler来更新UI了。</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Just test handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span>：                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startTestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            handler<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="解析异步消息处理机制"><a href="#解析异步消息处理机制" class="headerlink" title="解析异步消息处理机制"></a>解析异步消息处理机制</h3><p>Android中的异步消息处理机制主要由四个部分组成，Message、Handler、MessageQueue和Looper。下面对这四个部分进行简单的介绍。   </p><h4 id="1-Message"><a href="#1-Message" class="headerlink" title="1.Message"></a>1.Message</h4><p>Message是在线程之间传递的消息，让可以在内部携带少量的信息，用于在不同线程之间交换数据。除了上面代码中的what字段外，还可以用arg1和arg2字段来携带一些整型数据，使用obj字段可以携带一个Object对象。</p><h4 id="2-Handler"><a href="#2-Handler" class="headerlink" title="2.Handler"></a>2.Handler</h4><p>Handler顾名思义也就是处理者的意思，他主要是用于发送和处理消息的。发送消息一般是使用Handler的sendMessage()方法，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的handleMessage()方法中进行处理。</p><h4 id="3-MessageQueue"><a href="#3-MessageQueue" class="headerlink" title="3.MessageQueue"></a>3.MessageQueue</h4><p>MessageQueue是消息队列的意思，他主要用于存放所有通过Handler发送的消息。这部分对象会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</p><h4 id="4-Looper"><a href="#4-Looper" class="headerlink" title="4.Looper"></a>4.Looper</h4><p>Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入到一个无限循环当中，然后每当发现MessageQueue中存在一条消息，就会将它取出，并传出到Handler的handerMessage方法中。每个线程中也只会有一个Looper对象。</p><h4 id="5-异步消息处理流程"><a href="#5-异步消息处理流程" class="headerlink" title="5.异步消息处理流程"></a>5.异步消息处理流程</h4><p>首先需要在主线程中创建一个Handler对象，并重写handlerMessage()方法。然后当子线程中需要更新UI时，就创建一个Message对象，并通过handler将这条消息发送出去。之后这条消息会被添加到MessageQueue队列中，等待被处理，而Looper则会一直尝试从MessageQueue中取出带处理的消息，最后分发回Handler的handleMessage()方法中。忧郁Handler是在主线程创建的，所以此时handleMessage()方法中的代码也会在主线程中运行，于是就完成了更新UI的操作了。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://raw.githubusercontent.com/NewLewis/MarkdownPhotos/master/handler.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> handler Message </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>volatile关键字</title>
      <link href="/2018/04/12/volatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2018/04/12/volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p>感觉自己对安卓的了解还是太弱，所以打算深入了解一点，刚看到了关于volatile关键字的用法，将书中的内容总结一波。</p><h3 id="原子性、可见性和有序性"><a href="#原子性、可见性和有序性" class="headerlink" title="原子性、可见性和有序性"></a>原子性、可见性和有序性</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>对基本数据类型变量的读取和赋值操作成为原子性操作，即这些操作都是不可被中断的，要么执行完毕，要么就不执行。</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>指线程之间的可见性，一个线程的修改状态对另一个线程是可见的。也就是一个线程修改的结果，另一个线程马上就能看见。</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>java内存模型中允许编译器和处理器对指令进行重排序，虽然重排序过程中不会影响到线程执行的正确性，但是会影响到多线程并发执行的正确性。</p><h3 id="volatile关键字的特点"><a href="#volatile关键字的特点" class="headerlink" title="volatile关键字的特点"></a>volatile关键字的特点</h3><h4 id="volatile不保证原子性"><a href="#volatile不保证原子性" class="headerlink" title="volatile不保证原子性"></a>volatile不保证原子性</h4><p>看下面一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> inc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        inc<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Main test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        test<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//线程让步，yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>inc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>先简单解释一下这段代码，定义public变量inc，并定义让其自增的方法，在主函数里new十个线程，每个线程里都运行自增的方法1000次。因为变量是volatile关键字声明的，就是说一个线程用了这个变量之后，马上就写会主存，其他线程马上就能用了。如果volatile能保证原子性，那么结果一定是10000，但是结果却会出现比10000小的数。</p><p>原因分析：因为volatile不能保证原子性，那么这个变量的自增操作就可能被中断，即读取到了inc的值，比如为4，但是线程这时被中断了，其他线程进行了完整的自增操作，inc的值变成了5，这时又回到前面的线程来执行，因为已经读取到了值为4，所以自增的结果也是5，然后写回主存。这样两个线程进行了自增操作，但inc却只增加了一次，所以最后的结果才会出现比10000小的情况。</p><h4 id="volatile保证有序性"><a href="#volatile保证有序性" class="headerlink" title="volatile保证有序性"></a>volatile保证有序性</h4><p>volatile关键字禁止指令进行重排序，因此volatile能保证有序性。</p><h3 id="正确使用volatile关键字"><a href="#正确使用volatile关键字" class="headerlink" title="正确使用volatile关键字"></a>正确使用volatile关键字</h3><ul><li>对变量的写操作不会依赖于当前值   </li><li>该变量没有包含在具有其他变量的不变式中      </li></ul><h4 id="两个使用volatile的场景"><a href="#两个使用volatile的场景" class="headerlink" title="两个使用volatile的场景"></a>两个使用volatile的场景</h4><p>1.状态标志</p><pre class=" language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> shutdownRequested<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    shutdown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>shutdownRequested<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果在另一个线程中调用shutdown方法，就需要执行某种同步来确保正确实现shutdownRequested变量的可见性。</p><p>2.双重检查模式（DCL） —–这种用法目前还没有完全搞清楚</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance  <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>getInstance方法中对Singleton进行了两次判空，第一次是为了不必要的同步，第二次是只有在Singleton等于null的情况下才创建实例。在这里用到了volatile关键字会或多或少地影响性能，但是保证了程序的正确性。DCL的优点是资源利用率高，第一次执行getInstance方法时单例对象才被实例化，效率高。其缺点是第一次加载时反应稍慢一些，在高发并发环境下也有一定影响。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile 同步 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android NineGridImageView以及Picasso的基本用法</title>
      <link href="/2018/04/08/Android-NineGridImageView%E4%BB%A5%E5%8F%8APicasso%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2018/04/08/Android-NineGridImageView%E4%BB%A5%E5%8F%8APicasso%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>今天做安卓的过程中，需要实现仿朋友圈的九宫格图片显示，查到了这个比较好用的开源库NineGridImageView，在使用这个库的过程中，又接触到了Picasso图片加载库的使用，现将两者的基本用法记录如下。</p><h1 id="NineGridImageView"><a href="#NineGridImageView" class="headerlink" title="NineGridImageView"></a>NineGridImageView</h1><p>依赖等参考原github项目：    <a href="https://github.com/laobie/NineGridImageView" target="_blank" rel="noopener">地址</a></p><h2 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.jaeger.ninegridimageview.NineGridImageView</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/nineGridImageView<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>imgGap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>show</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">fill</span><span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>singleImgSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120dp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> NineGridImageViewAdapter<span class="token operator">&lt;</span>Photo<span class="token operator">></span> mAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NineGridImageViewAdapter</span><span class="token operator">&lt;</span>Photo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDisplayImage</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> ImageView imageView<span class="token punctuation">,</span> Photo photo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            Picasso<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CropSquareTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span>imageView<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            Picasso<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CropSquareTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span>imageView<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> ImageView <span class="token function">generateImageView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">generateImageView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        @Override</span><span class="token comment" spellcheck="true">//        protected void onItemImageClick(Context context, int index, List&lt;Photo> photoList) {</span><span class="token comment" spellcheck="true">//            showBigPicture(context, photoList.get(index).getUrl());</span><span class="token comment" spellcheck="true">//        }</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="设置图片资源，加载adapter"><a href="#设置图片资源，加载adapter" class="headerlink" title="设置图片资源，加载adapter"></a>设置图片资源，加载adapter</h3><pre class=" language-java"><code class="language-java">nineGridImageView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>mAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>nineGridImageView<span class="token punctuation">.</span><span class="token function">setImagesData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Photo<span class="token operator">></span> photoLists<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Picasso"><a href="#Picasso" class="headerlink" title="Picasso"></a>Picasso</h1><h2 id="使用方法及参数说明"><a href="#使用方法及参数说明" class="headerlink" title="使用方法及参数说明"></a>使用方法及参数说明</h2><pre class=" language-java"><code class="language-java">Picasso    <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//可以加载超链接，drawable资源，file文件</span>    <span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//加载时显示的图片</span>    <span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//重定义大小</span>    <span class="token punctuation">.</span><span class="token function">centerCrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//剪裁方式</span>    <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//目的imageview</span></code></pre><h2 id="自定义transform"><a href="#自定义transform" class="headerlink" title="自定义transform"></a>自定义transform</h2><p>除了使用自带的剪裁方法外，还可以自定义剪裁方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//按最小边的长度剪裁成正方形</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CropSquareTransform</span> <span class="token keyword">implements</span> <span class="token class-name">Transformation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//截取从宽度和高度最小作为bitmap的宽度和高度</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Bitmap <span class="token function">transform</span><span class="token punctuation">(</span>Bitmap source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> source<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Bitmap result <span class="token operator">=</span> Bitmap<span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> size<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            source<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"crop()"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用自定义的剪裁方式:</p><pre class=" language-java"><code class="language-java">Picasso    <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CropSquareTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用自定义的剪裁方式</span>    <span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">centerCrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span> </code></pre>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 九宫格图片 </tag>
            
            <tag> NineGridImageView </tag>
            
            <tag> Picasso </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android实现图片剪裁成正方形</title>
      <link href="/2018/04/07/Android%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%89%AA%E8%A3%81%E6%88%90%E6%AD%A3%E6%96%B9%E5%BD%A2/"/>
      <url>/2018/04/07/Android%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%89%AA%E8%A3%81%E6%88%90%E6%AD%A3%E6%96%B9%E5%BD%A2/</url>
      <content type="html"><![CDATA[<p>虽然上学期学过安卓，但是真正实际运用中还是会遇到很多问题。比如最近帮师兄做毕设的时候就问题连连，故将一些问题记录于此，以便后来复习参考。<br>在实现朋友圈的时候，朋友圈的图片显示都是正方形的，所以需要进行裁剪，一下便是裁剪的详细过程。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Bitmap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Bitmap bitmap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> edgeLength<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ImageUtils</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span><span class="token keyword">int</span> edgeLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bitmap <span class="token operator">=</span> bitmap<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>edgeLength <span class="token operator">=</span> edgeLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bitmap <span class="token function">centerSquareScaleBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> bitmap <span class="token operator">||</span> edgeLength <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span>  null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Bitmap result <span class="token operator">=</span> bitmap<span class="token punctuation">;</span>        <span class="token keyword">int</span> widthOrg <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightOrg <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>widthOrg <span class="token operator">></span> edgeLength <span class="token operator">&amp;&amp;</span> heightOrg <span class="token operator">></span> edgeLength<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//压缩到一个最小长度是edgeLength的bitmap</span>            <span class="token keyword">int</span> longerEdge <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>edgeLength <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>widthOrg<span class="token punctuation">,</span> heightOrg<span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>widthOrg<span class="token punctuation">,</span> heightOrg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> scaledWidth <span class="token operator">=</span> widthOrg <span class="token operator">></span> heightOrg <span class="token operator">?</span> longerEdge <span class="token operator">:</span> edgeLength<span class="token punctuation">;</span>            <span class="token keyword">int</span> scaledHeight <span class="token operator">=</span> widthOrg <span class="token operator">></span> heightOrg <span class="token operator">?</span> edgeLength <span class="token operator">:</span> longerEdge<span class="token punctuation">;</span>            Bitmap scaledBitmap<span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                scaledBitmap <span class="token operator">=</span> Bitmap<span class="token punctuation">.</span><span class="token function">createScaledBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> scaledWidth<span class="token punctuation">,</span> scaledHeight<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//从图中截取正中间的正方形部分。</span>            <span class="token keyword">int</span> xTopLeft <span class="token operator">=</span> <span class="token punctuation">(</span>scaledWidth <span class="token operator">-</span> edgeLength<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> yTopLeft <span class="token operator">=</span> <span class="token punctuation">(</span>scaledHeight <span class="token operator">-</span> edgeLength<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                result <span class="token operator">=</span> Bitmap<span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>scaledBitmap<span class="token punctuation">,</span> xTopLeft<span class="token punctuation">,</span> yTopLeft<span class="token punctuation">,</span> edgeLength<span class="token punctuation">,</span> edgeLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                scaledBitmap<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将imageview转化为bitmap的方法：</p><pre class=" language-java"><code class="language-java">Bitmap bitmap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BitmapDrawable<span class="token punctuation">)</span>imageView<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片剪裁 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/04/21/hello-world/"/>
      <url>/2017/04/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a><br>haha </p>]]></content>
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
